import express from 'express';
import path from 'path';
import { fileURLToPath } from 'url';
import fs, { promises as fsPromises, createWriteStream, createReadStream } from 'fs';
import fetch from 'node-fetch';
import { Store } from './src/client.js';
import { SignatureClient } from './src/Signature.js';
import { v4 as uuidv4 } from 'uuid';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const app = express();
const port = process.env.PORT || 5004;

// C·∫•u h√¨nh middleware
app.use(express.urlencoded({ extended: true, limit: '10mb' }));
app.use(express.json({ limit: '10mb' }));
app.use(express.static(path.join(__dirname, 'public')));
app.use('/.well-known/acme-challenge', express.static(path.join(__dirname, '.well-known', 'acme-challenge')));

// C√°c h·∫±ng s·ªë
const CHUNK_SIZE = 5 * 1024 * 1024; // 5MB
const MAX_CONCURRENT_DOWNLOADS = 3;
const MAX_RETRIES = 3;
const RETRY_DELAY = 3000;
const DOWNLOAD_TIMEOUT = 30000; // 30s
const SESSION_TIMEOUT = 5 * 60 * 1000; // 5 ph√∫t
const FILE_CLEANUP_DELAY = 30 * 60 * 1000; // 30 ph√∫t

// Helper functions
function generateRandomString(length = 16) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  return Array.from({ length }, () => chars.charAt(Math.floor(Math.random() * chars.length))).join('');
}

async function downloadChunk({ url, start, end, output, attempt = 1 }) {
  const headers = { Range: `bytes=${start}-${end}` };
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), DOWNLOAD_TIMEOUT);

  try {
    const response = await fetch(url, { headers, signal: controller.signal });
    if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);

    const fileStream = createWriteStream(output, { flags: 'a' });
    await new Promise((resolve, reject) => {
      response.body.pipe(fileStream);
      response.body.on('error', reject);
      fileStream.on('finish', resolve);
    });
    return true;
  } catch (error) {
    if (attempt >= MAX_RETRIES) throw error;
    await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
    return downloadChunk({ url, start, end, output, attempt: attempt + 1 });
  } finally {
    clearTimeout(timeoutId);
  }
}

class IPATool {
  constructor() {
    this.activeDownloads = new Set();
    this.authSessions = new Map();
  }

  async validateInput({ APPLE_ID, PASSWORD, APPID }) {
    if (!APPLE_ID || !PASSWORD || !APPID) {
      throw new Error('Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: Apple ID, m·∫≠t kh·∫©u ho·∫∑c App ID');
    }
    
    if (!/^\d+$/.test(APPID)) {
      throw new Error('App ID ph·∫£i l√† chu·ªói s·ªë');
    }
  }

  getErrorMessage(error) {
    const errorMessages = {
      'invalid_credentials': 'Sai Apple ID ho·∫∑c m·∫≠t kh·∫©u',
      'account_locked': 'T√†i kho·∫£n ƒë√£ b·ªã kh√≥a',
      'invalid_code': 'M√£ 2FA kh√¥ng ƒë√∫ng',
      'expired_code': 'M√£ 2FA ƒë√£ h·∫øt h·∫°n',
      'app_not_found': 'Kh√¥ng t√¨m th·∫•y ·ª©ng d·ª•ng',
      'not_purchased': 'B·∫°n ch∆∞a mua ·ª©ng d·ª•ng n√†y',
      'rate_limit': 'Th·ª≠ l·∫°i sau √≠t ph√∫t',
      'network_error': 'L·ªói k·∫øt n·ªëi, ki·ªÉm tra m·∫°ng'
    };

    return errorMessages[error.code] || 
           error.customerMessage || 
           error.message || 
           'L·ªói kh√¥ng x√°c ƒë·ªãnh';
  }

  async handle2FA(response, downloadId) {
    if (response.failureType?.includes('MFA') || 
        response.customerMessage?.includes('verification')) {
      
      this.authSessions.set(downloadId, {
        APPLE_ID: response.APPLE_ID,
        PASSWORD: response.PASSWORD,
        authToken: response.authToken,
        expires: Date.now() + SESSION_TIMEOUT
      });

      const message = response.customerMessage.includes('text') ? 
        'Nh·∫≠p m√£ 6 s·ªë t·ª´ SMS' :
        'Nh·∫≠p m√£ t·ª´ thi·∫øt b·ªã tin c·∫≠y';
      
      return {
        require2FA: true,
        message: `üîê ${message}`,
        downloadId
      };
    }
    return null;
  }

  async downipa({ path: downloadPath, APPLE_ID, PASSWORD, CODE, APPID, appVerId, downloadId = `dl_${uuidv4().slice(0, 8)}` }) {
    this.activeDownloads.add(downloadId);
    
    try {
      await this.validateInput({ APPLE_ID, PASSWORD, APPID });
      downloadPath = downloadPath || '.';

      // Ki·ªÉm tra session 2FA n·∫øu c√≥
      if (CODE && this.authSessions.has(downloadId)) {
        const session = this.authSessions.get(downloadId);
        if (session.expires < Date.now()) {
          throw new Error('Phi√™n l√†m vi·ªác h·∫øt h·∫°n');
        }
        APPLE_ID = session.APPLE_ID;
        PASSWORD = session.PASSWORD;
      }

      // X√°c th·ª±c
      console.log(`[${downloadId}] üîë ƒêang x√°c th·ª±c...`);
      let user;
      try {
        user = await Store.authenticate(APPLE_ID, PASSWORD, CODE);
        
        const twoFAResult = await this.handle2FA(user, downloadId);
        if (twoFAResult) return twoFAResult;

        if (user._state !== 'success') {
          throw {
            code: user.failureType,
            customerMessage: user.customerMessage
          };
        }
      } catch (error) {
        throw new Error(this.getErrorMessage(error));
      }

      // T·∫£i app
      console.log(`[${downloadId}] üì¶ ƒêang t·∫£i th√¥ng tin ·ª©ng d·ª•ng...`);
      let app;
      try {
        app = await Store.download(APPID, appVerId, user);
        
        const appTwoFAResult = await this.handle2FA(app, downloadId);
        if (appTwoFAResult) return appTwoFAResult;

        if (app._state !== 'success' || !app.songList?.[0]?.metadata) {
          throw {
            code: app.failureType,
            customerMessage: app.customerMessage
          };
        }
      } catch (error) {
        throw new Error(this.getErrorMessage(error));
      }

      // T·∫£i file IPA
      const song = app.songList[0];
      const appInfo = {
        name: song.metadata.bundleDisplayName,
        version: song.metadata.bundleShortVersionString,
        bundleId: song.metadata.softwareVersionBundleId
      };

      const outputDir = path.join(downloadPath, generateRandomString());
      await fsPromises.mkdir(outputDir, { recursive: true });

      const outputFile = path.join(outputDir, `${appInfo.name.replace(/[^\w]/g, '_')}_${appInfo.version}.ipa`);
      
      console.log(`[${downloadId}] üì• ƒêang t·∫£i IPA...`);
      try {
        const headRes = await fetch(song.URL, { method: 'HEAD' });
        if (!headRes.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i ·ª©ng d·ª•ng');
        
        const fileSize = parseInt(headRes.headers.get('content-length'));
        const chunks = Math.ceil(fileSize / CHUNK_SIZE);
        
        // T·∫£i t·ª´ng ph·∫ßn
        for (let i = 0; i < chunks; i += MAX_CONCURRENT_DOWNLOADS) {
          const chunkPromises = [];
          for (let j = 0; j < MAX_CONCURRENT_DOWNLOADS && i + j < chunks; j++) {
            const start = (i + j) * CHUNK_SIZE;
            const end = Math.min(start + CHUNK_SIZE - 1, fileSize - 1);
            const tempFile = path.join(outputDir, `chunk_${i + j}`);
            
            chunkPromises.push(
              downloadChunk({
                url: song.URL,
                start,
                end,
                output: tempFile
              })
            );
          }
          await Promise.all(chunkPromises);
        }
        
        // Gh√©p file
        const outputStream = createWriteStream(outputFile);
        for (let i = 0; i < chunks; i++) {
          const chunkFile = path.join(outputDir, `chunk_${i}`);
          await new Promise((resolve) => {
            createReadStream(chunkFile)
              .pipe(outputStream, { end: false })
              .on('end', () => fsPromises.unlink(chunkFile).then(resolve).catch(resolve));
          });
        }
        outputStream.end();
        
        // K√Ω file
        console.log(`[${downloadId}] üñäÔ∏è ƒêang k√Ω IPA...`);
        const sigClient = new SignatureClient(song, APPLE_ID);
        await sigClient.loadFile(outputFile);
        await sigClient.appendMetadata().appendSignature();
        await sigClient.write();

        // D·ªçn d·∫πp
        await fsPromises.rm(outputDir, { recursive: true, force: true }).catch(() => {});
        this.authSessions.delete(downloadId);

        return {
          success: true,
          downloadUrl: `/files/${path.basename(outputDir)}/${path.basename(outputFile)}`,
          fileName: path.basename(outputFile),
          appInfo,
          downloadId
        };

      } catch (error) {
        await fsPromises.rm(outputDir, { recursive: true, force: true }).catch(() => {});
        throw new Error(`L·ªói khi t·∫£i ·ª©ng d·ª•ng: ${error.message}`);
      }

    } catch (error) {
      this.authSessions.delete(downloadId);
      this.activeDownloads.delete(downloadId);
      console.error(`[${downloadId}] ‚ùå L·ªói:`, error.message);
      throw error;
    }
  }
}

const ipaTool = new IPATool();

// Routes
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'healthy',
    activeDownloads: ipaTool.activeDownloads.size,
    activeSessions: ipaTool.authSessions.size
  });
});

app.post('/download', async (req, res) => {
  const { APPLE_ID, PASSWORD, CODE, APPID, appVerId, downloadId } = req.body;
  
  try {
    const result = await ipaTool.downipa({
      path: path.join(__dirname, 'downloads'),
      APPLE_ID,
      PASSWORD,
      CODE,
      APPID,
      appVerId,
      downloadId
    });

    if (result.require2FA) {
      return res.status(200).json(result);
    }

    // L√™n l·ªãch d·ªçn d·∫πp
    setTimeout(async () => {
      try {
        const filePath = path.join(__dirname, 'downloads', path.dirname(result.downloadUrl.split('/files/')[1]));
        await fsPromises.rm(filePath, { recursive: true, force: true });
        console.log(`[${result.downloadId}] üßπ ƒê√£ d·ªçn d·∫πp file`);
      } catch (err) {
        console.error(`[${result.downloadId}] L·ªói d·ªçn d·∫πp:`, err.message);
      }
    }, FILE_CLEANUP_DELAY);

    res.json(result);

  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      downloadId: downloadId || 'unknown'
    });
  }
});

app.use('/files', express.static(path.join(__dirname, 'downloads')));

// X·ª≠ l√Ω l·ªói
app.use((req, res) => {
  res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y' });
});

app.use((err, req, res, next) => {
  console.error('üî• L·ªói server:', err);
  res.status(500).json({ error: 'L·ªói server' });
});

// Kh·ªüi ƒë·ªông server
const server = app.listen(port, () => {
  console.log(`üöÄ Server ƒëang ch·∫°y tr√™n port ${port}`);
});

// T·∫Øt server ƒë√∫ng c√°ch
process.on('SIGTERM', () => {
  console.log('üõë Nh·∫≠n t√≠n hi·ªáu t·∫Øt server');
  server.close(() => {
    console.log('üî¥ Server ƒë√£ t·∫Øt');
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  server.close(() => {
    process.exit(0);
  });
});