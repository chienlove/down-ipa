document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('download-form');
  const submitBtn = document.getElementById('submitBtn');
  const submitText = document.getElementById('submitText');
  const spinner = document.getElementById('spinner');

  // üîÅ ƒêi·ªÅn l·∫°i n·∫øu c√≥ LocalStorage
  ['APPLE_ID', 'APPID', 'appVerId'].forEach(key => {
    if (localStorage.getItem(key)) {
      form[key].value = localStorage.getItem(key);
    }
  });

  form.addEventListener('submit', async function (e) {
    e.preventDefault();

    const formData = {
      APPLE_ID: form.APPLE_ID.value,
      PASSWORD: form.PASSWORD.value,
      CODE: form.VERIFICATION_CODE.value,
      APPID: form.APPID.value,
      appVerId: form.appVerId.value
    };

    localStorage.setItem('APPLE_ID', formData.APPLE_ID);
    localStorage.setItem('APPID', formData.APPID);
    localStorage.setItem('appVerId', formData.appVerId);

    // B·∫Øt ƒë·∫ßu loading
    submitBtn.disabled = true;
    spinner.classList.remove('hidden');
    submitText.textContent = "ƒêang x·ª≠ l√Ω...";

    const tryDownload = async (payload) => {
      const res = await fetch('/download', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      const result = await res.json();

      if (res.ok && result.downloadUrl) {
        Swal.fire({
          icon: 'success',
          title: 'T·∫£i th√†nh c√¥ng!',
          text: 'IPA ƒëang ƒë∆∞·ª£c t·∫£i xu·ªëng...',
          timer: 2000,
          showConfirmButton: false
        });
        setTimeout(() => {
          window.location.href = result.downloadUrl;
        }, 1500);
        return;
      }

      if (result.require2FA) {
        const { value: code } = await Swal.fire({
          title: 'üîê M√£ x√°c minh 2FA',
          input: 'text',
          inputLabel: result.message || 'Nh·∫≠p m√£ 6 ch·ªØ s·ªë ƒë∆∞·ª£c g·ª≠i ƒë·∫øn thi·∫øt b·ªã Apple c·ªßa b·∫°n.',
          inputPlaceholder: '123456',
          inputAttributes: {
            maxlength: 6,
            autocapitalize: 'off',
            autocorrect: 'off'
          },
          confirmButtonText: 'Ti·∫øp t·ª•c'
        });

        if (code) {
          await tryDownload({ ...payload, CODE: code });
        } else {
          Swal.fire('ƒê√£ h·ªßy', 'B·∫°n ch∆∞a nh·∫≠p m√£ x√°c minh.', 'info');
        }
        return;
      }

      const errMsg = result.error?.toLowerCase() || '';
      if (errMsg.includes('password') || errMsg.includes('incorrect')) {
        Swal.fire('Sai m·∫≠t kh·∫©u', 'Apple ID ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.', 'error');
      } else if (errMsg.includes('version')) {
        Swal.fire('ID phi√™n b·∫£n kh√¥ng h·ª£p l·ªá', 'ƒê·ªÉ tr·ªëng ƒë·ªÉ t·∫£i b·∫£n m·ªõi nh·∫•t.', 'warning');
      } else if (errMsg.includes('not found') || errMsg.includes('app')) {
        Swal.fire('App ID kh√¥ng ƒë√∫ng', '·ª®ng d·ª•ng kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a mua b·∫±ng t√†i kho·∫£n n√†y.', 'warning');
      } else {
        Swal.fire('L·ªói kh√¥ng x√°c ƒë·ªãnh', result.error || 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω.', 'error');
      }
    };

    try {
      await tryDownload(formData);
    } catch (err) {
      console.error('‚ùå Client error:', err);
      Swal.fire('L·ªói k·∫øt n·ªëi', err.message || 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.', 'error');
    } finally {
      submitBtn.disabled = false;
      spinner.classList.add('hidden');
      submitText.textContent = "T·∫£i IPA";
    }
  });
});